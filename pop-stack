#include <iostream>
#include <fstream>

using namespace std;

template <class T> class Node{
	private:
		T key;
		Node <T> *next;
	public:
		Node(T key){
			this->key=key;
			next = NULL;
		}
		void setKey(T key){
			this->key=key;
		}
		void setNext(Node <T> *next){
			this->next=next;
		}
		T getKey(){
			return key;
		}
		Node <T> *getNext(){
			return next;
		}
};

template <class T> class Stack{
	private:
		Node <T> *cima;
		int N;
	public:
		Stack(){
			N = 0;
			cima = NULL;
		}
		
		void push(T key){
			Node <T> *newnode = new Node <T>(key);
			if (!cima){
				cima = newnode;
			}
			else{
				newnode->setNext(cima);
				cima = newnode;
			}
			N++;
		}
		
		void pop(){
			cima = cima->getNext();
			N--;
		}

		void stampa(ostream &os){
			for (int i=0; i<N; i++){
				os << cima->getKey() << " ";
				cima = cima->getNext();
			}
		}
};


int main(){
	
	fstream infile, outfile;
	infile.open("input.txt", ios::in);
	outfile.open("output.txt", ios::out);
	
	for(int i=0; i<100; i++){
		string type;
		int N;
		infile >> type >> N;
		if (type == "double" || type=="bool" || type=="int"){
			Stack <double> stack;
			for(int j=0; j<N; j++){
				char ini;
				infile >> ini;
				if(ini == 'i'){
					double ele;
					infile >> ele;
					stack.push(ele);
				}
				if(ini == 'p'){
					infile >> ini >> ini;
					stack.pop();
				}
			}
			stack.stampa(outfile);
		}
		
		if (type == "char"){
			Stack <char> stack;
			for(int j=0; j<N; j++){
				char ini;
				infile >> ini;
				if(ini == 'i'){
					char ele;
					infile >> ele;
					stack.push(ele);
				}
				if(ini == 'p'){
					infile >> ini >> ini;
					stack.pop();
				}
			}
			stack.stampa(outfile);
		}	
	outfile << endl;
	}
	return 0;
}
