#include <iostream>
#include <fstream>

using namespace std;

template <class T> class Node{

	private:
		int color;
		T key;
		Node <T> *left, *right, *parent;
	public:
		Node(T key){
			this->key = key;
			left = right = parent = NULL;
		}
		void setKey(T key){
			this->key = key;
		}	
		
		void setLeft(Node <T> *left){
			this->left = left;
		}
		
		void setRight(Node <T> *right){
			this->right = right;
		}
		
		void setParent(Node <T> *parent){
			this->parent = parent;
		}
		T getKey(){
			return key;
		}
		Node <T> *getLeft(){
			return left;
		}
		Node <T> *getRight(){
			return right;
		}
		Node <T> *getParent(){
			return parent;
		}
		
};

template <class T> class BST{

	private:
		Node <T> *root;
		int N;
		
		void _preorder(Node <T> *y, ostream &os){
			if (y){
				os << y->getKey() << " ";
				_preorder(y->getLeft(), os);
				_preorder(y->getRight(), os);
			}
		}
		
		void _inorder(Node <T> *y, ostream &os){
			if (y){
				_inorder(y->getLeft(), os);
				os << y->getKey() << " ";
				_inorder(y->getRight(), os);
			}
		}
		
		void _postorder(Node <T> *y, ostream &os){
			if (y){
				_postorder(y->getLeft(), os);
				_postorder(y->getRight(), os);
				os << y->getKey() << " ";
			}
		}
		
		Node <T> *_search(Node <T> *y, T x){
			if (!y) return NULL;
			if (x == y->getKey()) return y;
			if (x < y->getKey()) return _search(y->getLeft(), x);
			return _search(y->getRight(), x);
		}
		
		Node <T> *_successor(Node <T> *y){
			if (!y) return NULL;
			if (y->getRight()){
				y = _min(y->getRight());
				return y;
			}
			else{
				T x = y->getKey();
				do y = y->getParent();
				while(y && x > y->getKey());
				if (y) return y;
				return NULL;
			}
		}
		
		Node <T> *_min(Node <T> *y){
			if (!y || !y->getLeft()) return y;
			return _min(y->getLeft());
		}
		
		void _canc(Node <T> *y, T x){
			Node <T> *tmp = _search(y, x);
			if (tmp){
				if (tmp->getLeft() && tmp->getRight()){
					Node <T> *succ = _successor(tmp);
					tmp->setKey(succ->getKey());
					_canc(succ, succ->getKey());
				}
				else{
					Node <T> *child = tmp->getLeft();
					if (!child) child = tmp->getRight();
					Node <T> *p = tmp->getParent();
					if (p){
						if (x < p->getKey()){
							p->setLeft(child);
						}
						else{
							p->setRight(child);
						}
					}
					else{
						root = child;
					}
					if (child){
						child->setParent(p);
					}
					N--;
				}
			}
		}
		
		bool isLeftChild(Node <T> *y){
			return y == y->getParent()->getLeft(); 
		}
		
	public:
		BST(){
			root = NULL;
			N = 0;
		}
		void insert(T key){
			Node <T> *newnode = new Node <T>(key);
			Node <T> *tmp = root;
			Node <T> *p = NULL;
			while(tmp){
				p = tmp;
				if (key <= tmp->getKey()){
					tmp = tmp->getLeft();
				}
				else{
					tmp = tmp->getRight();
				}
			}
			if (p){
				if (key <= p->getKey()){
					p->setLeft(newnode);
				}
				else{
					p->setRight(newnode);
				}
			}
			else{
				root = newnode;
			}
			newnode->setParent(p);
			N++;
		}
		
		void canc(T x){
			_canc(root, x);
		}
		
		void preorder(ostream &os){
			_preorder(root, os);
		}
		
		void inorder(ostream &os){
			_inorder(root, os);
		}
		
		void postorder(ostream &os){
			_postorder(root, os);
		}
		
		void leftRotate(T key){
        	Node<T> *tmp = _search(root, key);
        		if (tmp && tmp->getRight()) {
         	   		Node<T> *newParent = tmp->getRight();
         	   		insertNodeUp(tmp, newParent);
          	   		tmp->setRight(newParent->getLeft());
          	  	if (newParent->getLeft()) newParent->getLeft()->setParent(tmp);
          	  		newParent->setLeft(tmp);
        		}
    		}
		
		void insertNodeUp(Node<T> *before, Node<T> *after){
        	if (before->getParent()){
            	if (isLeftChild(before)) before->getParent()->setLeft(after);
           		else before->getParent()->setRight(after);
        	} 
			else root = after;
        	after->setParent(before->getParent());
        	before->setParent(after);
    	}
		
		void rightRotate(T key){
        	Node<T> *tmp = _search(root, key);
        		if (tmp && tmp->getLeft()) {
         	   		Node<T> *newParent = tmp->getLeft();
         	   		insertNodeUp(tmp, newParent);
          	   		tmp->setLeft(newParent->getRight());
          	  	if (newParent->getRight()) newParent->getRight()->setParent(tmp);
          	  		newParent->setRight(tmp);
        		}
    		}
			
};

int main(){
	
	fstream infile, outfile;
	infile.open("input.txt", ios::in);
	outfile.open("output.txt", ios::out);
	
	for (int task = 0; task < 100; task++){
		
		string type;
		int N, M;
		string visita;
		infile >> type >> N >> M >> visita;
		if (type == "int"){
			BST <int> bst;
			for (int i = 0; i < N; i++){
				char c;
				infile >> c;
				if (c == 'i'){
					infile >> c >> c >> c;
					int val;
					infile >> val;
					bst.insert(val);
				}
				if (c == 'c'){
					infile >> c >> c >> c >> c;
					int val;
					infile >> val;
					bst.canc(val);
				}
			}
			for (int i = 0; i < M; i++){
				char c;
				infile >> c;
				if (c == 'l'){
					infile >> c >> c >> c >> c;
					int val;
					infile >> val;
					bst.leftRotate(val);
				}
				if (c == 'r'){
					infile >> c >> c >> c >> c >> c;
					int val;
					infile >> val;
					bst.rightRotate(val);
				}
			}
			if (visita == "preorder"){
				bst.preorder(outfile);
			}
			if (visita == "inorder"){
				bst.inorder(outfile);
			}
			if (visita == "postorder"){
				bst.postorder(outfile);
			}
		}
		if (type == "double"){
			BST <double> bst;
			for (int i = 0; i < N; i++){
				char c;
				infile >> c;
				if (c == 'i'){
					infile >> c >> c >> c;
					double val;
					infile >> val;
					bst.insert(val);
				}
				if (c == 'c'){
					infile >> c >> c >> c >> c;
					double val;
					infile >> val;
					bst.canc(val);
				}
			}
			for (int i = 0; i < M; i++){
				char c;
				infile >> c;
				if (c == 'l'){
					infile >> c >> c >> c >> c;
					double val;
					infile >> val;
					bst.leftRotate(val);
				}
				if (c == 'r'){
					infile >> c >> c >> c >> c >> c;
					double val;
					infile >> val;
					bst.rightRotate(val);
				}
			}
			if (visita == "preorder"){
				bst.preorder(outfile);
			}
			if (visita == "inorder"){
				bst.inorder(outfile);
			}
			if (visita == "postorder"){
				bst.postorder(outfile);
			}
		}
		outfile << endl;
	}
	
	
return 0;	
}
